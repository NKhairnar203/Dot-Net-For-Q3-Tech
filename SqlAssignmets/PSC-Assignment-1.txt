------------------ Easy Level ----------------------------------

1. Understanding JOINS (Theoretical)
  Explain the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN with real-world examples.
Ans: 
  1. INNER JOIN (Only Matching Records)
    It returns only the matching rows from both tables.
    If there is no match between the tables, those rows are excluded.

  Example Scenario:
     Imagine a system where we have:

      Customers table (stores customer details).
      Orders table (stores orders placed by customers).

    Query:
      SELECT Customers.CustomerID, Customers.Name, Orders.OrderID, Orders.Product
      FROM Customers
      INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

  2. LEFT JOIN (All Left Table Records + Matching Right Table Records)
    Returns all records from the left table and only matching records
    from  the right table. If no match is found, NULL is returned for the right table.
    Query:
    SELECT Customers.CustomerID, Customers.Name, Orders.OrderID, Orders.Product
    FROM Customers
    LEFT JOIN Orders 
    ON Customers.CustomerID = Orders.CustomerID;

  
  3. RIGHT JOIN (All Right Table Records + Matching Left Table Records)
     Returns all records from the right table and only matching records from the left table. If no match is found, NULL is returned for the left table.
    Query:
    SELECT Customers.CustomerID, Customers.Name, Orders.OrderID, Orders.Product
    FROM Customers
    RIGHT JOIN Orders 
    ON Customers.CustomerID = Orders.CustomerID;

  4. FULL OUTER JOIN (All Records from Both Tables)
     Returns all records from both tables, filling missing matches with NULL.
    Query:
    SELECT Customers.CustomerID, Customers.Name, Orders.OrderID, Orders.Product
    FROM Customers
    FULL OUTER JOIN Orders 
    ON Customers.CustomerID = Orders.CustomerID;



----------------  2. Customers & Orders ---------------------------

-- Given tables: 
create table customers(customer_id int primary key, name varchar(25), email varchar(40));

insert into customers(customer_id, name, email) values 
(1,"Alice","alice@email.com"),
(2,"Bob","bob@email.com"),
(3,"Charlie","charlie@email.com"),
(4,"David","david@email.com"),
(5,"Eva","eva@email.com");

select * from customers;

create table orders(order_id int primary key, customer_id int, total_amount decimal(12,2), order_date date);

insert into orders(order_id, customer_id, total_amount, order_date) values
(101,1,250,"2024-02-10"),
(102,2,500,"2024-02-11"),
(103,1,300,"2024-02-12"),
(104,3,700,"2024-02-13"),
(105,2,150,"2024-02-14"),
(106,4,450,"2024-02-15");

select * from orders;

-- Write an SQL query to:
-- Retrieve all customers who have placed an order.
select c.customer_id, c.name, c.email
from customers c
right join orders o
on c.customer_id = o.customer_id
group by c.customer_id, c.name, c.email;

-- List orders along with the customer names.
select c.name, o.order_id, o.total_amount, o.order_date
from customers c
inner join orders o
on c.customer_id = o.customer_id;

-- Find customers who haven’t placed any orders.
select *
from customers c
left join orders o
on c.customer_id = o.customer_id
where o.order_id is Null;


---------------------- 3. Employees & Departments ---------------------

-- Given tables:
-- employees(emp_id, name, department_id, salary)
-- departments(department_id, dept_name)

create table employees(emp_id int primary key, name varchar(25), department_id int, salary decimal(12,2));

insert into employees(emp_id, name, department_id, salary) values
(1,"Alice",2,40000),
(2,"Bob",3,51000),
(3,"Charlie",1,64000),
(4,"David",3,45000),
(5,"Eva",2,67000);

select * from employees;

create table departments(department_id int primary key, dept_name varchar(20));

insert into departments(department_id, dept_name) values
(1,"IT"),
(2,"HR"),
(3,"Management"),
(4,"Teacher");

select * from departments;

-- Write a query to:

-- Retrieve all employees and their department names, ensuring employees without a department are still listed.
select e.emp_id, e.name,e.salary,d.dept_name
from employees e
left join departments d
on e.department_id = d.department_id;

-- Find departments that have no employees.
select d.department_id,d.dept_name
from employees e
right join departments d
on d.department_id = e.department_id
where e.emp_id is Null;





---------------------- 4. Filtering with Aggregation & JOIN ----------------

-- Given tables:

-- students(student_id, name)
create table students(student_id int primary key, name varchar(20)); 

insert into students(student_id, name) values
(101,"Nilesh"),
(102,"Rushikesh"),
(103,"Sanket"),
(104,"Prathmesh"),
(105,"Santosh"),
(106,"Kunal");

select * from students;


-- courses(course_id, title)
create table courses(course_id varchar(20) primary key, title varchar(30));

insert into courses(course_id, title) values
("web_01","Web Developement"),
("dsa_02","Data Stucture"),
("ds_03","Data Science"),
("ai_04","Airtificial Intel.");

select * from courses;

-- enrollments(student_id, course_id, grade)
create table enrollments(student_id int, course_id varchar(20), grade int);

insert into enrollments(student_id, course_id, grade) values
(101,"web_01",94),
(102,"web_01",86),
(104,"dsa_02",80),
(101,"dsa_02",78),
(102,"dsa_02",80),
(103,"ai_04",83),
(105,"ds_03",70),
(104,"ai_04",85)
;

select * from enrollments;

-- Write a query to:
-- Retrieve the average grade per course.
select c.title, coalesce(avg(e.grade),0) as average_grade
from enrollments e
right join courses c
on c.course_id = e.course_id
group by c.title;

-- List students who are not enrolled in any courses.
select s.student_id, s.name
from enrollments e
right join students s
on s.student_id = e.student_id
where e.student_id is null;

-- Find students who scored above the course average grade.
select e.student_id
from students s
join enrollments e
on s.student_id = e.student_id
where e.grade < avg(e.grade)
group by s.student_id;



---------------- Medium Level (Complex JOINS & Aggregations) ------------


-- Given tables:

-- employees(emp_id, name, department_id, salary, manager_id)
create table employees_2(emp_id int primary key, name varchar(25), department_id int, salary decimal(12,2), manager_id int);

insert into employees_2(emp_id, name, department_id, salary, manager_id) values
(1,"Alice",2,40000,2),
(2,"Bob",3,51000,1),
(3,"Charlie",1,64000,3),
(4,"David",3,45000,2),
(5,"Eva",2,67000,1);

-- departments(department_id, dept_name, manager_id)
create table departments_2(department_id int primary key, dept_name varchar(20),manager_id int);

insert into departments_2(department_id, dept_name,manager_id) values
(1,"IT",1),
(2,"HR",2),
(3,"Management",3),
(4,"sales",4);


-- managers(manager_id, manager_name, bonus)
create table managers(manager_id int primary key, manager_name varchar(20),bonus int); 

insert into managers(manager_id, manager_name,bonus) values
(1,"Nilesh",2000),
(2,"Rushikesh",3000),
(3,"Sanket",4000),
(4,"Prathmesh",4000);


-- Write an SQL query to:
-- Retrieve all employees with their department name and manager details.
select e.emp_id, e.name,e.salary,d.dept_name, m.manager_name,m.bonus
from employees_2 e
join departments_2 d
on e.department_id = d.department_id 
join managers m
on e.manager_id = m.manager_id;


-- Find departments that do not have a manager assigned.
select d.department_id, d.dept_name
from departments_2 d
join managers m
on d.manager_id = m.manager_id
where m.manager_id is Null;

-- Retrieve employees who earn more than their department’s average salary.
select *
from employees_2 e
where salary > (
		select avg(salary)
        from employees s
        where department_id = s.department_id);




--------------- Product Sales Analysis with JOINS-----------------
-- Given tables:

-- products(product_id, product_name, category)
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50)
);

-- orders(order_id, customer_id, order_date)
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE
);

-- order_items(order_item_id, order_id, product_id, quantity, price)
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10,2)
    
);


INSERT INTO products (product_id, product_name, category) VALUES
(1, 'Laptop', 'Electronics'),
(2, 'Phone', 'Electronics'),
(3, 'Desk Chair', 'Furniture'),
(4, 'Tablet', 'Electronics'),
(5, 'Bookshelf', 'Furniture');

SELECT * FROM PRODUCTS;

INSERT INTO orders (order_id, customer_id, order_date) VALUES
(101, 1, '2024-02-01'),
(102, 2, '2024-02-03'),
(103, 3, '2024-02-04'),
(104, 1, '2024-02-05'),
(105, 4, '2024-02-06');

SELECT * FROM oRDERS;

INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES
(1001, 101, 1, 1, 1200.00), 
(1002, 101, 3, 2, 150.00),  
(1003, 102, 2, 1, 800.00), 
(1004, 103, 4, 3, 500.00),  
(1005, 104, 5, 1, 300.00),  
(1006, 105, 3, 1, 150.00);  

SELECT * FROM ORDER_ITEMS;

-- Write SQL queries to:
-- Retrieve all products that have never been sold.
SELECT 
	P.PRODUCT_ID, 
    P.PRODUCT_NAME, 
    P.CATEGORY
FROM PRODUCTS P
JOIN ORDER_ITEMS OI
ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE OI.PRODUCT_ID IS NULL;

-- Find the top 3 best-selling products based on total quantity sold.
SELECT 
	P.PRODUCT_ID, 
    P.PRODUCT_NAME, 
    P.CATEGORY, 
    OI.QUANTITY
FROM PRODUCTS P
JOIN ORDER_ITEMS OI
ON P.PRODUCT_ID = OI.PRODUCT_ID
ORDER BY OI.QUANTITY DESC
LIMIT 3;

-- Get the total revenue per product category.
SELECT 
    p.category, 
    SUM(oi.quantity * oi.price) AS total_revenue
FROM order_items oi
JOIN products p 
ON oi.product_id = p.product_id
GROUP BY p.category
ORDER BY total_revenue DESC;


-- Advanced Filtering with JOINS: Employee Performance
-- Given tables:

-- employees(emp_id, name, salary, department_id)
insert into employees(emp_id, name, department_id, salary) values
(1,"Alice",2,40000),
(2,"Bob",3,51000),
(3,"Charlie",1,64000),
(4,"David",3,45000),
(5,"Eva",2,67000);


select * from employees;

-- departments(department_id, dept_name, manager_id)
create table departments_2(department_id int primary key, dept_name varchar(20),manager_id int);

insert into departments_2(department_id, dept_name,manager_id) values
(1,"IT",1),
(2,"HR",2),
(3,"Management",3),
(4,"sales",4);

-- projects(project_id, project_name, budget)
CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(100),
    budget DECIMAL(12,2)
);

INSERT INTO projects (project_id, project_name, budget) VALUES
(201, 'AI Research', 500000),
(202, 'Web App Dev', 200000),
(203, 'Blockchain Dev', 300000),
(204, 'Marketing Campaign', 150000);

-- employee_projects(emp_id, project_id, role)
CREATE TABLE employee_projects (
    emp_id INT,
    project_id INT,
    role VARCHAR(50)
);

INSERT INTO employee_projects(emp_id, project_id, role) VALUES
(1, 201, 'Lead'),
(1, 202, 'Consultant'),
(2, 204, 'Manager'),
(3, 203, 'Analyst'),
(4, 201, 'Developer'),
(5, 202, 'Tester');

-- Write SQL queries to:
-- Retrieve all employees and the projects they are working on.
select e.emp_id, e.name, e.department_id, p.project_name, ep.role
from employees e
join employee_projects ep
on e.emp_id = ep.emp_id
join projects p
on ep.project_id = p.project_id
order by e.emp_id;

-- Find employees who are not assigned to any project.
select e.emp_id, e.name, e.department_id, e.salary
from employees e
join employee_projects ep
on e.emp_id = ep.emp_id
join projects p
on ep.project_id = p.project_id
where ep.project_id is null
order by e.emp_id;

-- List projects that have no employees assigned.
SELECT p.project_id, p.project_name 
FROM projects p
LEFT JOIN employee_projects ep 
ON p.project_id = ep.project_id
WHERE ep.emp_id IS NULL
ORDER BY p.project_id;



------------- 4. Customer Order Behavior Analysis  ----------------

-- Given tables:
-- customers(customer_id, name, email)
select * from customers;

-- orders_2(order_id, customer_id, total_amount, order_date)
create table orders_2(order_id int primary key, customer_id int, total_amount decimal(10,2), order_date date);

insert into orders_2 (order_id, customer_id, total_amount, order_date) values
(101, 1, 250.75, '2024-02-01'),
(102, 2, 125.50, '2024-07-12'),
(103, 1, 300.00, '2024-02-03'),
(104, 2, 325.50, '2024-05-02'),
(105, 1, 370.00, '2024-01-23'),
(106, 3, 340.00, '2024-06-05'),
(107, 1, 300.00, '2024-02-03'),
(108, 2, 325.50, '2024-05-02'),
(109, 1, 370.00, '2024-01-23'),
(110, 3, 340.00, '2024-06-05');

-- Write SQL queries to:
-- Find customers who have placed more than 5 orders.
select c.customer_id, c.name, c.email, 
count(o.customer_id) as total_orders
from customers c
join orders_2 o
on c.customer_id = o.customer_id
group by c.customer_id, c.name, c.email
having total_orders >= 5;


-- Retrieve the total amount spent per customer.
select c.customer_id, c.name, c.email, sum(o.total_amount) as total_spent
from customers c
join orders_2 o
on c.customer_id = o.customer_id
group by c.customer_id, c.name, c.email;

-- Get customers who haven’t placed any orders in the last 6 months.
select c.*
from customers c
join orders_2 o
on o.customer_id = c.customer_id
where o.order_date >= date_sub(curdate(), interval 6 Month)
and o.customer_id is null;



--0------ Mastering Aggregations with HAVING & JOINS ----------------

-- Given a sales table with:
-- sale_id, product_name, quantity, price, region
create table sales(sale_id int primary key, product_name varchar(20), quantity int, price decimal(10,2), region varchar(20));
insert into sales (sale_id, product_name, quantity, price, region) VALUES
(1, 'Laptop', 5, 1200.00, 'North'),
(2, 'Smartphone', 10, 1000.00, 'South'),
(3, 'Tablet', 7, 800.00, 'West'),
(4, 'Monitor', 3, 400.00, 'East'),
(5, 'Keyboard', 15, 250.00, 'North'),
(6, 'Mouse', 20, 125.00, 'South'),
(7, 'Printer', 4, 250.00, 'West'),
(8, 'Headphones', 12, 175.00, 'East'),
(9, 'Webcam', 6, 200.00, 'North'),
(10, 'External HDD', 8, 200.00, 'South');

-- Write queries to:
-- Find total revenue per region, but only for regions where revenue exceeds $10,000.
select region, sum(quantity * price) as revenue
from sales
group by region
having revenue > 10000;


-- Retrieve the lowest revenue-generating product.
select region, sum(quantity * price) as revenue
from sales
group by region
order by revenue
limit 1;


-- Get the monthly revenue for the past 6 months.





-----------  Hard Level (Advanced JOINS & Real-World Scenarios)   ------ -- 


-- Mastering SQL Joins: Employees, Departments, and Managers
-- Given tables:

-- employees(emp_id, name, department_id, salary)
select * from employees;

-- departments(department_id, dept_name, manager_id)
select * from departments_2;

-- managers(manager_id, manager_name, bonus)
select * from managers; 

-- Write SQL queries to:
-- Retrieve all employees with their department names and managers.
select e.*, d.dept_name , m.manager_name
from employees e
join departments_2 d
on e.department_id = d.department_id
join managers m
on d.manager_id = m.manager_id;


-- Find employees who earn more than their department’s average salary.
select *
from employees e
where salary > (
		select avg(salary)
        from employees s
        where department_id = s.department_id);


-- Calculate the total salary expense per manager, including bonus amounts.
select m.manager_id, m.manager_name, SUM(e.salary) + m.bonus as total_expense
from managers m
join departments_2 d on m.manager_id = d.manager_id
join employees e on d.department_id = e.department_id
group by m.manager_id, m.manager_name, m.bonus
order by total_expense desc;





-------------- E-commerce Data Analysis with JOINS & Aggregation------------

-- Given tables:

-- customers(customer_id, name, email)
select * from customers;

-- orders(order_id, customer_id, total_amount, order_date)
select * from orders_2;

-- order_items(order_item_id, order_id, product_id, quantity, price)
select * from order_items;

-- products(product_id, product_name, category, supplier_id)
create table products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(30),
    category VARCHAR(20),
    supplier_id int
);

INSERT INTO products (product_id, product_name, category, supplier_id) VALUES
(1, 'Laptop', 'Electronics',2),
(2, 'Phone', 'Electronics',1),
(3, 'Desk Chair', 'Furniture',3),
(4, 'Tablet', 'Electronics',1),
(5, 'Bookshelf', 'Furniture',4);

select * from products;

-- Write SQL queries to:
-- Find the total revenue per customer, including product details.
select c.customer_id,
	c.name,c.email,
    p.product_name, 
    p.category,
    oi.quantity, 
    sum(oi.price* oi.quantity) as total_revenue
from customers c
join orders_2 o
on c.customer_id = o.customer_id
join order_items oi
on o.order_id = oi.order_id
join products p
on p.product_id = oi.product_id
group by c.customer_id,c.name,c.email,p.product_name, p.category,oi.quantity
order by total_revenue desc;


-- Retrieve the top 5 customers based on total spending.
select c.name, sum(oi.price * oi.quantity) as total_spending
from customers c
join orders_2 o
on c.customer_id = o.customer_id
join order_items oi
on o.order_id = oi.order_id
join products p
on p.product_id = oi.product_id
group by c.name
limit 5;


-- Get the most profitable product category.

select p.category , sum(oi.price * oi.quantity) as total_spending
from products p
join order_items oi
on p.product_id = oi.product_id
group by p.category
order by total_spending desc
limit 1;


-- Find customers who purchased products from at least 3 different categories.
select c.*
from customers c
join orders_2 o
on c.customer_id = o.customer_id
join order_items oi
on o.order_id = oi.order_id
join products p
on p.product_id = oi.product_id
group by c.customer_id 
having count( distinct p.category) > 3;